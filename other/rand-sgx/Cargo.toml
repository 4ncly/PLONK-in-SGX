[package]
name = "rand"
version = "0.7.3"
authors = ["The Rand Project Developers", "The Rust Project Developers"]
license = "MIT OR Apache-2.0"
readme = "README.md"
repository = "https://github.com/rust-random/rand"
documentation = "https://rust-random.github.io/rand/"
homepage = "https://crates.io/crates/rand"
description = """
Random number generators and other randomness functionality.
"""
keywords = ["random", "rng"]
categories = ["algorithms", "no-std"]
exclude = ["/utils/*", "/.travis.yml", "/appveyor.yml", ".gitignore", "/sgx/*"]
autobenches = true
edition = "2018"

[badges]
travis-ci = { repository = "rust-random/rand" }
appveyor = { repository = "rust-random/rand" }

[features]
default = ["std", "mesalock_sgx"] # without "std" rand uses libcore
# Meta-features:
nightly = ["simd_support"] # enables all features requiring nightly rust
serde1 = [] # does nothing, deprecated

# Optional dependencies:
std = ["rand_core/std", "rand_core/mesalock_sgx", "rand_chacha/std", "rand_chacha/mesalock_sgx", "alloc", "getrandom"]
alloc = ["rand_core/alloc"]  # enables Vec and Box support (without std)
# re-export optional WASM dependencies to avoid breakage:
# Warning: wasm-bindgen and stdweb features will be removed in rand 0.8;
# recommended to activate via the getrandom crate instead.
#wasm-bindgen = ["getrandom_package/wasm-bindgen"]
#stdweb = ["getrandom_package/stdweb"]
getrandom = ["getrandom_package", "rand_core/getrandom"]
mesalock_sgx = ["sgx_tstd"]

# Configuration:
simd_support = ["packed_simd"] # enables SIMD support
small_rng = ["rand_pcg"]    # enables SmallRng

[workspace]
members = [
    "rand_core",
    "rand_distr",
    "rand_chacha",
    "rand_hc",
    "rand_pcg",
    #"tests/wasm_bindgen",
]

[dependencies]
rand_core = { path = "rand_core", version = "0.5.1" }
rand_pcg = { path = "rand_pcg", version = "0.2", optional = true }
# Do not depend on 'getrandom_package' directly; use the 'getrandom' feature!
# This is a dependency because: we forward wasm feature flags
# This is renamed because: we need getrandom to depend on rand_core/getrandom
getrandom_package = { git = "https://github.com/mesalock-linux/getrandom-sgx", package = "getrandom", optional = true }
log = { git = "https://github.com/mesalock-linux/log-sgx", optional = true }
sgx_tstd = { path = "/root/sgx/sgx_tstd", optional = true }

[dependencies.packed_simd]
# NOTE: so far no version works reliably due to dependence on unstable features
package = "packed_simd_2"
version = "0.3.4"
# git = "https://github.com/rust-lang-nursery/packed_simd"
optional = true
features = ["into_bits"]

[target.'cfg(unix)'.dependencies]
# Used for fork protection (reseeding.rs)
# SGX does not provide fork. No need for fork protection
#libc = { version = "0.2.22", optional = true, default-features = false }

# Emscripten does not support 128-bit integers, which are used by ChaCha code.
# We work around this by using a different RNG.
[target.'cfg(not(target_os = "emscripten"))'.dependencies]
rand_chacha = { path = "rand_chacha", version = "0.2.1", default-features = false }
#[target.'cfg(target_os = "emscripten")'.dependencies]
#rand_hc = { path = "rand_hc", version = "0.2" }

[dev-dependencies]
#rand_pcg = { path = "rand_pcg", version = "0.2" }
# Only for benches:
#rand_hc = { path = "rand_hc", version = "0.2" }

[package.metadata.docs.rs]
all-features = true


[patch.'https://github.com/apache/teaclave-sgx-sdk.git']
sgx_alloc = { path = "../../../sgx_alloc" }
sgx_backtrace = { path = "../../../sgx_backtrace" }
sgx_backtrace_sys = { path = "../../../sgx_backtrace_sys" }
sgx_build_helper = { path = "../../../sgx_build_helper" }
sgx_cov = { path = "../../../sgx_cov" }
sgx_crypto_helper = { path = "../../../sgx_crypto_helper" }
sgx_demangle = { path = "../../../sgx_demangle" }
sgx_libc = { path = "../../../sgx_libc" }
sgx_rand = { path = "../../../sgx_rand" }
sgx_rand_derive = { path = "../../../sgx_rand_derive" }
sgx_serialize = { path = "../../../sgx_serialize" }
sgx_serialize_derive = { path = "../../../sgx_serialize_derive" }
sgx_serialize_derive_internals = { path = "../../../sgx_serialize_derive_internals" }
sgx_tcrypto = { path = "../../../sgx_tcrypto" }
sgx_tcrypto_helper = { path = "../../../sgx_tcrypto_helper" }
sgx_tdh = { path = "../../../sgx_tdh" }
sgx_tkey_exchange = { path = "../../../sgx_tkey_exchange" }
sgx_tprotected_fs = { path = "../../../sgx_tprotected_fs" }
sgx_trts = { path = "../../../sgx_trts" }
sgx_tse = { path = "../../../sgx_tse" }
sgx_tseal = { path = "../../../sgx_tseal" }
sgx_tstd = { path = "../../../sgx_tstd" }
sgx_tunittest = { path = "../../../sgx_tunittest" }
sgx_types = { path = "../../../sgx_types" }
#sgx_ucrypto = { path = "../../../sgx_ucrypto" }
sgx_unwind = { path = "../../../sgx_unwind" }
#sgx_urts = { path = "../../../sgx_urts" }